{"ast":null,"code":"var _jsxFileName = \"/Users/dheemanth/Desktop/Serverless/csci-5410-team-19/dalvacation/src/components/SecurityQuestionPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { Container, Typography, Box, TextField, Button } from \"@mui/material\";\nimport logo from \"../dal_logo.png\"; // Update this path to your actual logo file\nimport backgroundImage from \"../background.jpg\"; // Update this path to your actual background image file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SecurityQuestionPage = () => {\n  _s();\n  const [answer, setAnswer] = useState(\"\");\n  const [question, setQuestion] = useState(\"\");\n  const navigate = useNavigate();\n  const {\n    state\n  } = useLocation();\n  const userEmail = state === null || state === void 0 ? void 0 : state.email; // Receive email from login page\n\n  const fetchQuestionUrl = \"https://your-api-gateway-url/fetchSecurityQuestion\";\n  const verifyAnswerUrl = \"https://your-api-gateway-url/verifySecurityAnswer\";\n  useEffect(() => {\n    if (!userEmail) {\n      navigate(\"/login\"); // Redirect to login if no email is provided\n      return;\n    }\n    const fetchSecurityQuestion = async () => {\n      try {\n        const response = await fetch(fetchQuestionUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            email: userEmail\n          })\n        });\n        const data = await response.json();\n        if (response.ok) {\n          setQuestion(data.securityQuestion);\n        } else {\n          alert(\"Failed to fetch security question: \" + data.message);\n        }\n      } catch (error) {\n        console.error(\"Error fetching security question:\", error);\n        alert(\"Network error, please try again later.\");\n      }\n    };\n    fetchSecurityQuestion();\n  }, [userEmail, navigate]);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      const response = await fetch(verifyAnswerUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: userEmail,\n          answer: answer\n        })\n      });\n      const responseData = await response.json();\n      if (response.ok && responseData.status === \"success\") {\n        console.log(\"Verification Success:\", responseData);\n        navigate(\"/dashboard\"); // Navigate only on successful verification\n      } else {\n        console.error(\"Verification Failed:\", responseData.message);\n        alert(\"Verification failed: \" + responseData.message);\n      }\n    } catch (error) {\n      console.error(\"Network Error:\", error);\n      alert(\"Network error, please try again later.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    component: \"main\",\n    style: {\n      backgroundImage: `url(${backgroundImage})`,\n      backgroundSize: \"cover\",\n      minHeight: \"100vh\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      padding: 0\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(SecurityQuestionPage, \"XwU95PtXQ01KyrfvP9KrgGAcPu8=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = SecurityQuestionPage;\nexport default SecurityQuestionPage;\nvar _c;\n$RefreshReg$(_c, \"SecurityQuestionPage\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","Container","Typography","Box","TextField","Button","logo","backgroundImage","jsxDEV","_jsxDEV","SecurityQuestionPage","_s","answer","setAnswer","question","setQuestion","navigate","state","userEmail","email","fetchQuestionUrl","verifyAnswerUrl","fetchSecurityQuestion","response","fetch","method","headers","body","JSON","stringify","data","json","ok","securityQuestion","alert","message","error","console","handleSubmit","event","preventDefault","responseData","status","log","component","style","backgroundSize","minHeight","display","alignItems","justifyContent","padding","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dheemanth/Desktop/Serverless/csci-5410-team-19/dalvacation/src/components/SecurityQuestionPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { Container, Typography, Box, TextField, Button } from \"@mui/material\";\nimport logo from \"../dal_logo.png\"; // Update this path to your actual logo file\nimport backgroundImage from \"../background.jpg\"; // Update this path to your actual background image file\n\nconst SecurityQuestionPage = () => {\n  const [answer, setAnswer] = useState(\"\");\n  const [question, setQuestion] = useState(\"\");\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const userEmail = state?.email; // Receive email from login page\n\n  const fetchQuestionUrl = \"https://your-api-gateway-url/fetchSecurityQuestion\";\n  const verifyAnswerUrl = \"https://your-api-gateway-url/verifySecurityAnswer\";\n\n  useEffect(() => {\n    if (!userEmail) {\n      navigate(\"/login\"); // Redirect to login if no email is provided\n      return;\n    }\n\n    const fetchSecurityQuestion = async () => {\n      try {\n        const response = await fetch(fetchQuestionUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ email: userEmail }),\n        });\n        const data = await response.json();\n        if (response.ok) {\n          setQuestion(data.securityQuestion);\n        } else {\n          alert(\"Failed to fetch security question: \" + data.message);\n        }\n      } catch (error) {\n        console.error(\"Error fetching security question:\", error);\n        alert(\"Network error, please try again later.\");\n      }\n    };\n    fetchSecurityQuestion();\n  }, [userEmail, navigate]);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const response = await fetch(verifyAnswerUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          email: userEmail,\n          answer: answer,\n        }),\n      });\n\n      const responseData = await response.json();\n      if (response.ok && responseData.status === \"success\") {\n        console.log(\"Verification Success:\", responseData);\n        navigate(\"/dashboard\"); // Navigate only on successful verification\n      } else {\n        console.error(\"Verification Failed:\", responseData.message);\n        alert(\"Verification failed: \" + responseData.message);\n      }\n    } catch (error) {\n      console.error(\"Network Error:\", error);\n      alert(\"Network error, please try again later.\");\n    }\n  };\n\n  return (\n    <Container\n      component=\"main\"\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: \"cover\",\n        minHeight: \"100vh\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        padding: 0,\n      }}\n    >\n      {/* Remaining component structure */}\n    </Container>\n  );\n};\n\nexport default SecurityQuestionPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}