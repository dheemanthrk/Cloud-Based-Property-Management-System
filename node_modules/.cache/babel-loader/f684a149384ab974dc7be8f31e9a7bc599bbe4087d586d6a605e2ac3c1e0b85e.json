{"ast":null,"code":"var _jsxFileName = \"/Users/dheemanth/Desktop/Serverless/csci-5410-team-19/dalvacation/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\n// src/components/Chatbot.js\nimport React, { useState } from \"react\";\nimport { lexRuntime } from \"../aws_exports\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const handleInputChange = event => {\n    setInputText(event.target.value);\n  };\n  const handleSend = async () => {\n    const params = {\n      botId: \"your-bot-id\",\n      botAliasId: \"your-bot-alias\",\n      localeId: \"your-locale-id\",\n      // e.g., 'en_US'\n      sessionId: \"session-id\",\n      text: inputText,\n      requestAttributes: {},\n      sessionState: {}\n    };\n    try {\n      const response = await lexRuntime.recognizeText(params).promise();\n      setMessages([...messages, {\n        from: \"user\",\n        text: inputText\n      }, {\n        from: \"bot\",\n        text: response.messages[0].content\n      }]);\n      setInputText(\"\");\n    } catch (err) {\n      console.error(\"Error sending message to bot:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"fixed\",\n      bottom: 10,\n      right: 10\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsOpen(!isOpen),\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 300,\n        height: 400,\n        border: \"1px solid black\",\n        padding: 10,\n        overflow: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: msg.from === \"user\" ? \"right\" : \"left\"\n          },\n          children: msg.text\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"S8D2NcivjMoYO27TanLzcJQytoA=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","lexRuntime","jsxDEV","_jsxDEV","Chatbot","_s","isOpen","setIsOpen","inputText","setInputText","messages","setMessages","handleInputChange","event","target","value","handleSend","params","botId","botAliasId","localeId","sessionId","text","requestAttributes","sessionState","response","recognizeText","promise","from","content","err","console","error","style","position","bottom","right","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","width","height","border","padding","overflow","map","msg","idx","textAlign","type","onChange","_c","$RefreshReg$"],"sources":["/Users/dheemanth/Desktop/Serverless/csci-5410-team-19/dalvacation/src/components/Chatbot.js"],"sourcesContent":["// src/components/Chatbot.js\nimport React, { useState } from \"react\";\nimport { lexRuntime } from \"../aws_exports\";\n\nconst Chatbot = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  const handleInputChange = (event) => {\n    setInputText(event.target.value);\n  };\n\n  const handleSend = async () => {\n    const params = {\n      botId: \"your-bot-id\",\n      botAliasId: \"your-bot-alias\",\n      localeId: \"your-locale-id\", // e.g., 'en_US'\n      sessionId: \"session-id\",\n      text: inputText,\n      requestAttributes: {},\n      sessionState: {},\n    };\n\n    try {\n      const response = await lexRuntime.recognizeText(params).promise();\n      setMessages([\n        ...messages,\n        { from: \"user\", text: inputText },\n        { from: \"bot\", text: response.messages[0].content },\n      ]);\n      setInputText(\"\");\n    } catch (err) {\n      console.error(\"Error sending message to bot:\", err);\n    }\n  };\n\n  return (\n    <div style={{ position: \"fixed\", bottom: 10, right: 10 }}>\n      <button onClick={() => setIsOpen(!isOpen)}>Chat</button>\n      {isOpen && (\n        <div\n          style={{\n            width: 300,\n            height: 400,\n            border: \"1px solid black\",\n            padding: 10,\n            overflow: \"auto\",\n          }}\n        >\n          <div>\n            {messages.map((msg, idx) => (\n              <div\n                key={idx}\n                style={{ textAlign: msg.from === \"user\" ? \"right\" : \"left\" }}\n              >\n                {msg.text}\n              </div>\n            ))}\n          </div>\n          <input type=\"text\" value={inputText} onChange={handleInputChange} />\n          <button onClick={handleSend}>Send</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}